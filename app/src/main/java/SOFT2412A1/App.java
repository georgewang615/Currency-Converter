/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package SOFT2412A1;

import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class App {
    private static ExchangeBook book;
    private static DailyRates newest;
    private static DailyRates previous;
    private static Scanner newScan;
    private static FileHandler fh;
    private static InputHandler inputHandler;

    private static User user;

    public static void loadBook(String path) {
        fh = new FileHandler(path);
        try {
            book = fh.read();
        } catch(Exception e) {
            System.out.println("Couldn't load book");
        }
    }

    public static void display() {
        newest = book.getIndex(0);
        previous = book.getIndex(1);

        List<String> popularCurrencies = book.getPopularCurrencies();
        String message = "";
        message += String.format("%-12s", "From/To");
        for (String currency : popularCurrencies) {
            message += String.format("%-12s", currency);
        }
        List<List<Double>> newGrid = newest.getRatioGrid(popularCurrencies);
        List<List<Double>> previousGrid = previous.getRatioGrid(popularCurrencies);

        for (int i = 0; i < popularCurrencies.size(); i++) {
            message += "\n\n";
            message += String.format("%-12s", popularCurrencies.get(i));

            for (int j = 0; j < popularCurrencies.size(); j++) {
                Double newRatio = newGrid.get(i).get(j);
                Double previousRatio = previousGrid.get(i).get(j);

                if (newRatio.equals(0.0)) {
                    message += String.format("%-12s", "-");
                }

                else {
                    if (newRatio > previousRatio) {
                        message += String.format("%.2f", newRatio);
                        message += String.format("%-8s", " (I)");
                    } else if (newRatio < previousRatio) {
                        message += String.format("%.2f", newRatio);
                        message += String.format("%-8s", " (D)");
                    } else {
                        message += String.format("%-12.2f", newRatio);
                    }
                }
            }
        }
        System.out.println(message);
    }

    public static void normalUserMenu(){
        int selection;
        System.out.println("\nWelcome User!");
        do {
            selection = displayMenu("\nWhat would you like to do?",
                    new String[]{
                            "Convert Currencies",
                            "Display Conversion Rate Summary",
                            "Display Popular Currencies",
                            "Quit",
                    },"Your Prompt (1-4) : ");

            switch (selection) {
                case 1:
                    convertCurrency();
//                    User should be able to input money amount and choose its currency symbol and the desired currency
//                    they want to convert to
//                    Application should then carry out the conversion and display it with the current currency symbol.

                    selection = -1;
                    break;
                case 2:
                    getConversionRateSummary();
//                    print summary of the conversion rates of 2 currencies they choose within a specific duration
//                    (start and end dates). This includes all conversion rates, average, median, maximum, minimum and
//                    standard deviation of the conversion rate of the 2 currencies during the specified start and end date.
                    selection = -1;
                    break;
                case 3:
                    display();
                    selection = -1;
                    break;
                case 4:
                    System.out.println("Thank you for using the Currency Converter!\nHave a good day!");
                    return;
                default:
                    System.out.println("Please select a correct option (1-4)");
                    // Can't get here
            }
        } while (-1 == selection);
    }

    public static void adminUserMenu(){
        int selection;
        System.out.println("\nWelcome Admin!");
        do {
            selection = displayMenu("\nWhat would you like to do?",
                    new String[]{
                            "Convert Currencies",
                            "Display Conversion Rate Summary",
                            "Display Popular Currencies",
                            "Update Exchange Rates",
                            "Update Popular Currencies",
                            "Add New Currency",
                            "Quit",
                    },"Your Prompt (1-7): ");

            switch (selection) {
                case 1:
                    convertCurrency();
//                    User should be able to input money amount and choose its currency symbol and the desired currency
//                    they want to convert to
//                    Application should then carry out the conversion and display it with the current currency symbol.
                    selection = -1;
                    break;
                case 2:
                    getConversionRateSummary();
//                    print summary of the conversion rates of 2 currencies they choose within a specific duration
//                    (start and end dates). This includes all conversion rates, average, median, maximum, minimum and
//                    standard deviation of the conversion rate of the 2 currencies during the specified start and end date.
                    selection = -1;
                    break;
                case 3:
                    display();
                    selection = -1;
                    break;
                case 4:
                    updateExchangeRates();
                    selection = -1;
                    break;
                case 5:
                    updatePopularCurrencies();
                    selection = -1;
                    break;
                case 6:
                    addNewCurrency();
                    selection = -1;
                    break;
                case 7:
                    System.out.println("\nThank you for using the Currency Converter!\nHave a good day!");
                    return;
                default:
                    System.out.println("Please select a correct option (1-8)");
                    // Can't get here
            }
        } while (-1 == selection);
    }

    static int displayMenu(String header, String[] options, String message) {
        System.out.println("\n" + header);

        for (int i = 0; i < options.length; i++) {
            System.out.println((i+1) + ". " + options[i]);
        }

        return inputHandler.getMenuOption(message, options.length);
    }

    private static void initMenu() {
        int selection;

        do {
            selection = displayMenu("Welcome to the Currency Converter\n\nPlease select an option : ",
                    new String[]{
                            "Normal User",
                            "Admin User",
                    },"Your Prompt (1/2): ");

            switch (selection) {
                case 1:
                    user = new NormalUser();
                    normalUserMenu();
                    break;
                case 2:
                    System.out.println("Enter your Admin Password :");
                    String adminInput = newScan.nextLine();
                    if (adminInput.equals("admin")){
                        user = new AdminUser();
                        adminUserMenu();
                    }
                    else{
                        selection = -1;
                    }

                    break;
                default:
                    System.out.println("Please select a correct option (1/2)");
                    // Can't get here
            }
        } while (-1 == selection);
    }

    private static void convertCurrency() {
        String currentDate = DateHandler.toString(DateHandler.getCurrentDate());
        Currency oldCurrency = inputHandler.getInputCurrency(currentDate, "Currency to convert from: ", book);
        Currency newCurrency = inputHandler.getInputCurrency(currentDate, "Currency to convert to: ", book);

        while (true) {
            double amount = inputHandler.getInputDouble("Amount to convert: ");
            if (amount > 0) {
                System.out.println(book.convertCurrency(oldCurrency, newCurrency, amount));
                break;
            }
        }
    }

    private static void getConversionRateSummary() {
        System.out.println();
        Date startDate = inputHandler.getInputDate("Please enter the start date for the comparison: ");
        Date endDate = inputHandler.getInputDate("Please enter the end date for the comparison: ");
        Currency fromCurrency = inputHandler.getInputCurrency(DateHandler.toString(startDate),
            "Please enter the first currency to be compared: ", book);
        Currency toCurrency = inputHandler.getInputCurrency(DateHandler.toString(startDate),
            "Please enter the second currency to be compared: ", book);

        String summary = book.conversionRateSummary(startDate, endDate, fromCurrency, toCurrency);
        System.out.println(summary);
    }

    private static void updatePopularCurrencies() {
        System.out.println("");
        System.out.println("Please enter the 4 new popular currencies below: ");
        String currentDate = DateHandler.toString(DateHandler.getCurrentDate());
        List<String> newPopularCurrencies = new ArrayList<>();

        for (int i = 1; i < 5; i++) {
            Currency inputCurrency = inputHandler.getInputCurrency(currentDate, String.format("%d: ", i), book);
            newPopularCurrencies.add(inputCurrency.getName());
        }

        book.setPopularCurrencies(newPopularCurrencies);
        try {
            fh.write(book);
        } catch (Exception e) {
            System.out.println(e);
        }
    }
  
    private static void updateExchangeRates() {
        System.out.println("");

        String currentDate = DateHandler.toString(DateHandler.getCurrentDate());
        DailyRates previousRates = book.getDailyRates(currentDate);
        List<Currency> newCurrencies = new ArrayList<>();

        for (Currency currency : previousRates.getData()) {
            if (currency.getName().equals("AUD")) {
                newCurrencies.add(new Currency(currency.getName(), 1));
                continue;
            }

            String message = String.format("Please enter the new exchange rate between %s and AUD: ", currency.getName());
            double newValue = inputHandler.getInputDouble(message);
            newCurrencies.add(new Currency(currency.getName(), newValue));
        }

        book.addDailyRates(new DailyRates(currentDate, newCurrencies));
        try {
            fh.write(book);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private static void addNewCurrency() {
        DailyRates currentRates = book.getDailyRates(DateHandler.toString(DateHandler.getCurrentDate()));
        String currencyName;
        while (true) {
            System.out.print("Please enter the name of the new currency, or 'BACK' to return to the menu: ");
            currencyName = newScan.nextLine();
            if (currencyName.equalsIgnoreCase("BACK")) {
                return;
            }

            boolean currencyAlreadyExists = false;
            for (Currency currency : currentRates.getData()) {
                if (currencyName.equals(currency.getName())) {
                    currencyAlreadyExists = true;
                }
            }

            if (currencyAlreadyExists) {
                System.out.println("This currency already exists in the database.\n");
                continue;
            }
            break;
        }

        double currencyValue = inputHandler.getInputDouble("Please enter this currency's worth in AUD: ");
        Currency newCurrency = new Currency(currencyName, currencyValue);
        book.addCurrency(newCurrency);
        try {
            fh.write(book);
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    public static void main(String[] args) {
        newScan = new Scanner(System.in);
        inputHandler = new InputHandler(newScan);
        loadBook("src/main/resources/rates.json");
        initMenu();
    }
}
